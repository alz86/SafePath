@page "/admin/index"
@inherits SafePathComponentBase

@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.MultiTenancy
@inject IJSRuntime JSRuntime

@attribute [Authorize]

<!-- Include MapLibre CSS -->
<link href="/maplibre/maplibre-3.3.1.css" rel="stylesheet" />

<!-- Include MapLibre JS -->
<script src="/maplibre/maplibre-3.3.1.js"></script>

<style>
    .loading-overlay {
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.8);
        z-index: 9999;
        text-align: center;
        padding-top: 20%;
    }

    /* Pressed button state */
    .pressed {
        background-color: #0056b3; /* a darker blue */
    }

    .btn-list .fas {
        width: 18px; 
        display: inline-block;
        
    }

    .btn-list button {
        text-align: left;
        padding: 9px;
        width: 140px;
    }
    
    </style>


<!-- Title -->
<div class="container text-center mt-4">
    <h1>Dashboard</h1>
</div>

@if (Areas?.Any() == true)
{
    <div>
        <label for="areaSelect">Select Area:</label>
        <select id="areaSelect" @onchange="OnAreaSelected">
            @foreach (var area in Areas)
            {
                <option value="@area.Id">@area.DisplayName</option>
            }
        </select>
    </div>
}

<!-- Map -->
<div class="container text-center my-5" style="display: flex;">

    <div id="loadingOverlay" class="loading-overlay">
        <span>Loading security elements from the server...</span>
    </div>

    <!-- Map -->
    <div id="map" style="flex: 6; height: 500px;"></div>

    <!-- Vertical Button Bar -->
    <div class="btn-list" style="flex: 1; padding-left: 15px; display: flex; flex-direction: column;">
        <button @onclick='() => ToggleLayer("StreetLamp")' id="btn-StreetLamp" class="btn btn-secondary mb-2">
            <i class="fas fa-lightbulb"></i> Street Lamp
        </button>
        <button @onclick='() => ToggleLayer("CCTV")' id="btn-CCTV" class="btn btn-secondary mb-2">
            <i class="fas fa-video"></i> CCTV
        </button>
        <button @onclick='() => ToggleLayer("BusStation")' id="btn-BusStation" class="btn btn-secondary mb-2">
            <i class="fas fa-bus"></i> Bus Station
        </button>
        <button @onclick='() => ToggleLayer("RailwayStation")' id="btn-RailwayStation" class="btn btn-secondary mb-2">
            <i class="fas fa-train"></i> Railway
        </button>
        <button @onclick='() => ToggleLayer("PoliceStation")' id="btn-PoliceStation" class="btn btn-secondary mb-2">
            <i class="fas fa-shield-alt"></i> Police Station
        </button>
        <button @onclick='() => ToggleLayer("Hospital")' id="btn-Hospital" class="btn btn-secondary mb-2">
            <i class="fas fa-hospital"></i> Hospital
        </button>
        <button @onclick='() => ToggleLayer("Semaphore")' id="btn-Semaphore" class="btn btn-secondary mb-2">
            <i class="fas fa-traffic-light"></i> Semaphore
        </button>
    </div>
</div>

<!-- Buttons -->
<div class="container text-center my-4">
    <button @onclick="UpdateMapData" class="btn btn-primary mr-2">Update Map Data</button>
    <button @onclick="UpdateCrimeRate" class="btn btn-danger">Update Crime Rate</button>
</div>

<script defer>
    
    window.showLoadingOverlay = function () {
        document.getElementById('loadingOverlay').style.display = 'block';
    };

    window.hideLoadingOverlay = function () {
        document.getElementById('loadingOverlay').style.display = 'none';
    };

    window.initializeLayer = function (layerType, geoJsonData) {
        map.addSource(layerType + 'Source', {
            'type': 'geojson',
            'data': geoJsonData
        });

        map.addLayer({
            'id': layerType + '-layer',
            'type': 'symbol',
            'source': layerType + 'Source',
            'layout': {
                'icon-image': layerType + '-icon',
                'icon-size': 1
            }
        });
        map.setLayoutProperty(layerType + '-layer', 'visibility', 'none');
    };

    window.toggleLayerVisibility = function (layerType) {
        var layerId = layerType + '-layer';
        var visibility = map.getLayoutProperty(layerId, 'visibility');
        map.setLayoutProperty(layerId, 'visibility', (visibility === 'visible' ? 'none' : 'visible'));
    };

    window.showElements = function (layerType, elements) {
        
        if (!securityElements && !!elements) 
            securityElements = elements;

        if (map.getLayer(layerType + "-layer")) {
            // If layer already exists, simply toggle its visibility
            var visibility = map.getLayoutProperty(layerType + "-layer", 'visibility');
            var newVisibility = (visibility === 'none') ? 'visible' : 'none';
            map.setLayoutProperty(layerType + "-layer", 'visibility', newVisibility);
        } else {
            
            // Filter the security elements by the selected type
            var filteredData = {
                type: 'FeatureCollection',
                features: securityElements.features.filter(feature => {
                    return feature.properties.type === layerType;
                })
            };
            
            // Create a new source for our data
            map.addSource(layerType + "-source", {
                'type': 'geojson',
                'data': filteredData
            });

            // Create a new layer for our source
            map.addLayer({
                'id': layerType + "-layer",
                'type': 'symbol',
                'source': layerType + "-source",
                'layout': {
                    'icon-image': layerType + '-icon',
                    'icon-size': 1,
                    'visibility': 'visible'  // initially visible
                }
            });
        }
        toggleButtonState("btn-" + layerType);
    };

    function toggleButtonState(buttonId) {
        var btn = document.getElementById(buttonId);
        btn.classList.toggle('pressed');
    };

    var map;
    var securityElements = null;

    function initMapLibre(mapElementId, initLat, initLong) {
        map = new maplibregl.Map({
            container: mapElementId,
            //TODO: move to config key
            style: 'https://api.maptiler.com/maps/bright-v2/style.json?key=Smm16y1osc2YzhF8Vgk8', // or your own style
            center: [initLong, initLat], // starting position. Test: [13.4050, 52.5200] // Berlin
            zoom: 12 // starting zoom
        });
        
        map.on('load', function () {

            //we remove extra layers that comes by defaul but
            //are not needed
            filterLayers();

            // Create a list of icons to load
            var baseFolder = '/images/icons/';
            const icons = [
                'Hospital',
                'StreetLamp',
                'CCTV',
                'BusStation',
                'RailWayStation',
                'Semaphore',
                'PoliceStation'
            ];

            // Loads all icons, then adds them to the map
            loadAllImages(baseFolder, icons);
        });

    };
    
    function loadImage(baseFolder, name) {
            
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.onload = () => {
                map.addImage(name + '-icon', img);
                resolve();
            };
            img.onerror = reject;
            img.src = baseFolder + name + '.svg';
        });
    };

    function loadAllImages(baseFolder, icons) {
        const promises = [];
        for (const name of icons) {
            promises.push(loadImage(baseFolder, name));
        }
        return Promise.all(promises);
    };

    var intervalId;
    var timeout = 30000; // 30 seconds
    var elapsedTime = 0;

    function waitForMapLibre(initLat, initLong) {
        intervalId = setInterval(function () {
            
            elapsedTime += 300; // Interval time
            if (elapsedTime >= timeout) {
                console.error("Timed out waiting for MapLibre to load.");
                clearInterval(intervalId);
                return;
            }

            if (typeof maplibregl !== "undefined") {
                console.log("MapLibre is now loaded", { initLat, initLong });
                clearInterval(intervalId); // Stop the interval
                initMapLibre("map", initLat, initLong);
            }
        }, 300); // Repeats every 300 milliseconds
    }

    function filterLayers() {
        
        var allowedLayers = [
            "Background",
            "Glacier",
            "Forest",
            "Quarry",
            "Cemetery",
            "Rail",
            //"School",
            //"Hospital",
            //"Industrial",
            //"Commercial",
            //"Other",
            "Wood",
            "Grass",
            "Sand",
            "Residential",
            "River tunnel",
            "River",
            "Water offset",
            "Water intermittent",
            "Water",
            "Ferry",
            "Building",
            "Building top",
            "Tunnel outline",
            "Railway tunnel",
            "Tunnel",
            "Tunnel path",
            "Runway",
            "Aeroway",
            "Helipad",
            "Pier",
            "Pier road",
            "Bridge",
            "Minor road outline",
            "Major road outline",
            "Highway outline",
            "Minor road",
            "Major road",
            "Highway",
            "Bridge path outline",
            "Path",
            "Transit",
            "Transit hatching",
            "Railway",
            "Railway hatching",
            "Cablecar",
            "Cablecar dash",
            "Other border",
            "Disputed border",
            "Country border",
            "River labels",
            "Lakeline labels",
            "Ocean labels",
            "Sea labels",
            "Lake labels",
            "Ferry labels",
            "Oneway road",
            "Road labels",
            "Highway shield",
            "Highway shield (US)",
            "Airport labels",
            "Other POI",
            //"Amenity",
            //"Culture",
            //"Drink",
            //"Food",
            //"Tourism",
            "Education",
            "Sport",
            //"Shopping",
            "Healthcare",
            //"Transport",
            "Station",
            //"Place labels",
            "Village labels",
            "Town labels",
            "Island labels",
            "City labels",
            "State labels",
            "Capital city labels",
            "Country labels",
            "Continent labels",
            "SafePath-Elements"
        ];

        var layers = map.getStyle().layers;
        for (var layer of layers) {
            var idx = allowedLayers.indexOf(layer.id);
            if (idx === -1) {
                map.setLayoutProperty(layer.id, 'visibility', 'none');
            }
        }
    };

</script>